/*
 * Copyright (c) 2018 Isaac van Bakel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/// Whitespace

newline = "\n" / "\r\n" / !.

whitespace = ' ' / '\t'

// Optional whitespace
_ = whitespace*

// Significant whitespace
__ = whitespace+

non_whitespace = (!(whitespace / newline) .)

comment = "//" (!newline .)*

line<contents> = contents _ comment?

named_line<contents> = this:contents _ comment? { this }

line_slice -> &'input str 
  = $((!newline .)+)

/// Commands

arg_separator = "---"

name -> &'input str
  = $(((!arg_separator non_whitespace)+) ++ (__))

delimited_name<delim>
  = $(((!delim non_whitespace)+) ++ (__))

file_extension -> &'input str
  = $("." [A_Za-z_-]+)

comment_pattern -> &'input str
  = line_slice

error_pattern -> &'input str
  = line_slice

shell_command -> &'input str
  = line_slice

css_file -> &'input str
  = line_slice

a_command -> Command<'input>
  = "title" __ title:name { Command::Title(title) }
  / "s" __ section_name:(name?) { Command::Section(section_name) }
  / "code_type" __ ctype:$([A-Za-z_-]+) _ extension:file_extension 
    { Command::CodeType { code_type: ctype, file_extension: extension } }
  / "comment_type" __ pattern:comment_pattern { Command::CommentType(pattern) }
  / "compiler" __ sh_command:shell_command { Command::Compiler(sh_command) }
  / "error_format" __ err_format:error_pattern { Command::ErrorFormat(err_format) }
  / "book" __ { Command::Book }
  / "add_css" __ file:css_file { Command::AddCss(file) }
  / "overwrite_css" __ file:css_file { Command::OverwriteCss(file) }
  / "colorscheme" __ file:css_file { Command::Colorscheme(file) }
  / #expected("A valid command")

command -> Command<'input>
  = named_line<"@" a_command:a_command { a_command }>

/// Code blocks

codeblock_delim = "---"

block_name -> &'input str
  = delimited_name<(arg_separator / block_modifier)>

block_modifier -> BlockModifier
  = append
  / redef
  / arg_separator _ mods:(block_mods ++ __) { mods.into_iter().fold(BlockModifier::empty(), |set, flag| set | flag) }

possible_block_modifier -> BlockModifier
  =  modifier:block_modifier { modifier } 
  / _ { BlockModifier::empty() }

block_mods -> BlockModifier
  = append  
  / redef 
  / "noTangle" { BlockModifier::NoTangle }
  / "noWeave" { BlockModifier::NoWeave }
  / "noHeader" { BlockModifier::NoHeader}
append -> BlockModifier
 = "+=" { BlockModifier::Append }
redef -> BlockModifier 
  = "-=" { BlockModifier::Redef }

codeblock_header -> (&'input str, BlockModifier)
   = named_line<codeblock_delim _ name:block_name _ mods:possible_block_modifier { (name, mods) }>

/// Prose

prose -> &'input str
  = $(!'@' (!(newline / "//") .)*)

prose_line -> &'input str
  = named_line<prose>

/// Chapter links

chapter_file -> &'input str
  = $((!"(" .)+)

chapter -> (&'input str, &'input str)
  = "[" _ title:name _ "](" filename:chapter_file ")" { (title, filename) }

/// The whole file

pub partial_line -> PartialLitLine<'input>
  = block_header:codeblock_header { 
      let (block_name, mods) = block_header;
      PartialLitLine::CodeBlockStart(block_name, mods)
    }
  / line<codeblock_delim> { PartialLitLine::CodeBlockEnd }
  / line:(line_slice / $("")) { PartialLitLine::Line(line) }

pub lit_line -> LitLine<'input>
  = command:command { LitLine::Command(command) }
  / chapter:named_line<chapter> {
      let (title, file) = chapter;
      LitLine::Chapter {
          title: title, 
          file_name: file,
      }
    }
  / prose:prose_line { LitLine::Prose(prose) }

